#!/bin/bash

if [ ! -z "${DEBUG+x}" ] && $DEBUG; then
    set -ex
fi

# Check if whiptail is installed
command -v whiptail >/dev/null 2>&1 || { echo >&2 "I require whiptail but it's not installed.  Aborting."; exit 1; }

# BEGIN Helper variables
#ERROR=false
#ERROR_MSG=""
# END Helper Variables

# BEGIN FUNCTIONS
## base FUNCTIONS ==============================================================
init() {
    # Available variables
    KADUI_NO_STARTSCREEN=${KADUI_NO_STARTSCREEN:-false}
    KADUI_NO_ENDSCREEN=${KADUI_NO_ENDSCREEN:-false}
}
run() {
    showStartScreen
    showMainMenu
    showExitScreen
}
## show FUNCTIONS ==============================================================
showStartScreen() {
    if ! $KADUI_NO_STARTSCREEN; then
        {
            for ((i = 0 ; i <= 100 ; i+=50)); do
                echo $i
                sleep 1
            done
        } | whiptail --gauge "Please wait while kube-ansible-deploy-ui is starting ..." 6 80 0
    fi
    return 0
}
showExitScreen() {
    if ! $KADUI_NO_ENDSCREEN; then
        whiptail --title "You chose to cancel." --msgbox "Thank you for using kube-ansible-deploy-ui!\n\nExiting.." 20 50
    fi
    return 0
}
showError() {
    whiptail --title "An error occured" --msgbox "Message:\n$1" 20 50
}
showMainMenu() {
    while true; do
        MENU_OPTION=$(whiptail --title "kube-ansible-deploy-ui Main Menu" --menu "Choose your option" --ok-button "Select" --cancel-button "Exit" 15 80 4 \
        "1" "Load Ansible Kubernetes deployment" \
        "2" "Create new Ansible Kubernetes deployment" \
        "3" "About" 3>&1 1>&2 2>&3)
        rc=$?
        if [ $rc = 0 ]; then
            case "$MENU_OPTION" in
                1)
                showLoadDeployment
                ;;
                2)
                showCreateDeployment
                ;;
                3)
                showAbout
                ;;
            esac
        else
            return 0
        fi
    done
}
showAbout() {
    whiptail --title "kube-ansible-deploy-ui About" --textbox /dev/stdin 20 80 <<<"This script has been created by Alexander Trost aka galexrt."
}
showCreateDeployment() {
    local DEPLOYMENT_DIR="$PWD"
    for VAR_NAME in DEPLOYMENT_DIR; do
        VALUE=$(whiptail --title "CreateDeployment: Insert $VAR_NAME" --inputbox "Please insert the correct value." 10 60 "${!VAR_NAME}" 3>&1 1>&2 2>&3)
        rc=$?
        if [ $rc != 0 ]; then
            showError "You chose cancel. Returning to main menu."
            return 0
        fi
        declare "$VAR_NAME"="$VALUE"
    done
    {
        for ((i = 0 ; i <= 100 ; i+=100)); do
            sleep 1
            createDeployment "$DEPLOYMENT_DIR" || return 1
        done
    } | whiptail --gauge "Please wait while the deployment is being created ..." 6 80 0
    {
        cloneDeploymentRepo "$DEPLOYMENT_DIR" || return 1
    } | grep "[0-9]\{1,2\}%" | awk '{print $7}' | whiptail --gauge "Please wait while the deployment is being cloned ..." 6 80 0
    showLoadDeployment "$DEPLOYMENT_DIR"
}
createDeployment() {
    mkdir -p "$1" || { showError "Can't create deployment directory (path: \"$DEPLOYMENT_DIR\")."; return 1; }
}
cloneDeploymentRepo() {
    git clone https://github.com/galexrt/kubernetes-ansible-deployment.git "$1" --progress 2>&1 || { showError "Can't clone the repository."; return 1; }
}
## showLoadDeployment ==========================================================
showLoadDeployment() {
    local DEPLOYMENT_DIR="$1"
    if [ -z "$DEPLOYMENT_DIR" ]; then
        DEPLOYMENT_DIR=$(whiptail --title "CreateDeployment: Insert DEPLOYMENT_DIR" --inputbox "Please insert the correct value." 10 60 "$PWD" 3>&1 1>&2 2>&3)
        rc=$?
        if [ $rc != 0 ]; then
            showError "You chose cancel. Returning to main menu."
            return 0
        fi
    fi
    [ -d "$DEPLOYMENT_DIR" ] || { showError "Deployment (path: \"$DEPLOYMENT_DIR\") not found."; return 1; }
    [ -d "$DEPLOYMENT_DIR/.git" ] || { showError "Deployment (path: \"$DEPLOYMENT_DIR\") is not a git repository."; return 1; }
    # TODO load all options from group_vars/all.yml and so on
    while true; do
        MENU_OPTION=$(whiptail --title "LoadDeployment Menu" --menu "Choose your option" --ok-button "Select" --cancel-button "Return to Main Menu" 15 80 4 \
        "1" "Show current deployment info" \
        "2" "Change deployment info" \
        "3" "Update deployment files" \
        "4" "Update deployment files (hard)" \
        "5" "Run Ansible Playbook" \
        "6" "Quick Ansible Tasks" \
        "7" "Delete Deployment Repository" 3>&1 1>&2 2>&3)
        rc=$?
        if [ $rc = 0 ]; then
            case "$MENU_OPTION" in
                1)
                    showCurrentDeploymentInfo "$DEPLOYMENT_DIR"
                ;;
                2)
                    changeDeploymentInfo "$DEPLOYMENT_DIR"
                ;;
                3)
                    updateDeploymentRepo "$DEPLOYMENT_DIR"
                ;;
                4)
                    updateDeploymentRepo "$DEPLOYMENT_DIR" true
                ;;
                5)
                    runAnsiblePlaybook "$DEPLOYMENT_DIR"
                ;;
                6)
                    showQuickAnsibleTasks "$DEPLOYMENT_DIR"
                ;;
                7)
                    deleteDeploymentRepo "$DEPLOYMENT_DIR"
                ;;
            esac
        else
            return 0
        fi
    done
}
showCurrentDeploymentInfo() {
    showError "This feature has not been implemented yet."
    return 1
}
changeDeploymentInfo() {
    showError "This feature has not been implemented yet."
    return 1
}
updateDeploymentRepo() {
    cd "$1" || { showError "Deployment (path: \"$DEPLOYMENT_DIR\") repository not found."; return 1; }
    if [ ! -z "${2+x}" ] && $2; then
        # TODO Add message box with cancel button before resetting
        git reset --hard
    fi
    {
        git pull --all --progress 2>&1 || return $?
    } | grep "[0-9]\{1,2\}%" | awk '{print $7}' | whiptail --gauge "Please wait while the deployment is being cloned ..." 6 80 0
}
runAnsiblePlaybook() {
    showError "This feature has not been implemented yet."
    return 1
}
showQuickAnsibleTasks() {
    showError "This feature has not been implemented yet."
    return 1
}
deleteDeploymentRepo() {
    showError "This feature has not been implemented yet."
    return 1
}
# /END FUNCTIONS

init
run

exit 0
